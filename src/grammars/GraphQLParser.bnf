/**
 * Copyright (c) 2018-present, Jim Kynde Meyer
 * All rights reserved.
 * <p>
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
{
  generate=[names="long" tokenAccessors="no"]
  parserClass="com.intellij.lang.jsgraphql.GraphQLParser"

  implements="com.intellij.lang.jsgraphql.psi.GraphQLElement"
  extends="com.intellij.lang.jsgraphql.psi.impl.GraphQLElementImpl"

  psiClassPrefix="GraphQL"
  psiImplClassSuffix="Impl"
  psiPackage="com.intellij.lang.jsgraphql.psi"
  psiImplPackage="com.intellij.lang.jsgraphql.psi.impl"

  elementTypeHolderClass="com.intellij.lang.jsgraphql.psi.GraphQLElementTypes"
  elementTypeClass="com.intellij.lang.jsgraphql.psi.GraphQLCompositeElementType"
  tokenTypeClass="com.intellij.lang.jsgraphql.psi.GraphQLTokenType"

  implements("argument|directive|enumValue|field|fieldDefinition|fragmentDefinition|fragmentSpread|inputValueDefinition|objectField|operationDefinition|typeName|typeNameDefinition")="com.intellij.lang.jsgraphql.psi.GraphQLNamedElement"
  mixin(     "argument|directive|enumValue|field|fieldDefinition|fragmentDefinition|fragmentSpread|inputValueDefinition|objectField|operationDefinition|typeName|typeNameDefinition")="com.intellij.lang.jsgraphql.psi.impl.GraphQLNamedElementImpl"

  tokens = [

    // punctuation
    BANG="!"
    DOLLAR="$"
    PAREN_L="("
    PAREN_R=")"
    SPREAD="..."
    COLON=":"
    EQUALS="="
    AT="@"
    BRACKET_L="["
    BRACKET_R="]"
    BRACE_L="{"
    PIPE="|"
    BRACE_R="}"
    AMP="&"

    // keywords
    QUERY_KEYWORD="query"
    MUTATION_KEYWORD="mutation"
    SUBSCRIPTION_KEYWORD="subscription"
    FRAGMENT_KEYWORD="fragment"
    ON_KEYWORD="on"
    SCHEMA_KEYWORD="schema"
    TYPE_KEYWORD="type"
    SCALAR_KEYWORD="scalar"
    INTERFACE_KEYWORD="interface"
    IMPLEMENTS_KEYWORD="implements"
    ENUM_KEYWORD="enum"
    UNION_KEYWORD="union"
    EXTEND_KEYWORD="extend"
    INPUT_KEYWORD="input"
    DIRECTIVE_KEYWORD="directive"

    WHITE_SPACE='regexp:[,\s]+'
    COMMENT='regexp:#.*'

    // identifiers and literals
    VARIABLE_NAME='regexp:\$[_A-Za-z][_0-9A-Za-z]*'
    NAME='regexp:[_A-Za-z][_0-9A-Za-z]*'
    NUMBER='regexp:\d+(\.\d*)?((e|E)-?[0-9+])?'
    BLOCK_STRING="regexp:('([^'\\]|\\.)*'|\"\"\"([^\"\\]|\\.)*\"\"\")"
    REGULAR_STRING_PART='regexp:.*'

    // language injection
    TEMPLATE_CHAR='regexp:.*'
    TEMPLATE_START='${'
  ]
}

document ::= definition*

definition ::=
    operationDefinition |
    fragmentDefinition |
    typeSystemDefinition |
    templateDefinition
    {
        recoverWhile=definition_recover
    }

private definition_recover ::= !(root_tokens | NAME) /* NAME since incomplete keywords show up as such */

private root_tokens ::= definition_keywords | '{' /* anon query */ | OPEN_QUOTE /* schema description */ | (DOLLAR BRACE_L) /* placeholder */

private definition_keywords ::= operationType | 'fragment' | 'schema' | 'type' | 'interface' | 'input' | 'enum' | 'union' | 'scalar' | 'directive' | 'extend'

templateDefinition ::= templatePlaceholder {extends=definition}

// common 

operationType ::= 'query' | 'mutation' | 'subscription'

private description ::= quotedString

enumValue ::= !('true' | 'false' | 'null') identifier {methods=[nameIdentifier="identifier"] extends=value}

arrayValue::= '[' arrayValueElement* ']' {pin=1 extends=value}

private arrayValueElement ::= value {pin=1 recoverWhile=arrayValueElement_recover}

private arrayValueElement_recover ::= !(']'| value)

objectValue::= '{' objectField* '}' {pin=1 extends=value mixin="com.intellij.lang.jsgraphql.psi.impl.GraphQLObjectValuePsiElement"}

objectField ::= identifier ':' value {pin=1 methods=[nameIdentifier="identifier"] recoverWhile=objectField_recover mixin="com.intellij.lang.jsgraphql.psi.impl.GraphQLObjectFieldPsiElement"}

private objectField_recover ::= !('}' | value)

private directives ::= directive+

directive ::='@' identifier arguments? {pin=1 methods=[nameIdentifier="identifier"]}
arguments ::= '(' argument+ ')' {pin=1}

argument ::= identifier ':' value {pin=1 methods=[nameIdentifier="identifier"] recoverWhile=argument_recover mixin="com.intellij.lang.jsgraphql.psi.impl.GraphQLArgumentPsiElement"}

private argument_recover ::= !(')' | argument)

identifier ::= NAME | 'fragment' | 'query' | 'mutation' | 'subscription' | 'schema' | 'scalar' | 'type' | 'interface' | 'implements' | 'enum' | 'union' | 'input' | 'extend' | 'directive' {mixin="com.intellij.lang.jsgraphql.psi.impl.GraphQLReferencePsiElement"}

private templatePlaceholder ::= DOLLAR BRACE_L TEMPLATE_CHAR* BRACE_R

value ::=
    templateVariable |
    variable |
    stringValue |
    intValue |
    floatValue |
    booleanValue |
    nullValue |
    enumValue |
    arrayValue |
    objectValue

templateVariable ::= templatePlaceholder {extends=value}

variable ::= VARIABLE_NAME {pin=1 extends=value implements="com.intellij.psi.PsiNamedElement" mixin="com.intellij.lang.jsgraphql.psi.impl.GraphQLRenameAwareVariableElementImpl"}

defaultValue ::= '=' value {pin=1}

stringValue ::= quotedString {extends=value mixin="com.intellij.lang.jsgraphql.psi.impl.GraphQLStringValuePsiElement"}
 
type ::= nonNullType | listType | typeName

typeName ::= !(definition_keywords) identifier {extends=type methods=[nameIdentifier="identifier"] mixin="com.intellij.lang.jsgraphql.psi.impl.GraphQLTypeNamePsiElement"}
listType ::= '[' type ']' {extends=type}
nonNullType ::= typeName BANG | listType BANG {extends=type}

typeNameDefinition ::= !(definition_keywords) identifier {extends=type methods=[nameIdentifier="identifier"]}

booleanValue ::= 'true' | 'false' {extends=value}

nullValue ::= 'null' {extends=value}

quotedString ::= OPEN_QUOTE quotedStringBody? CLOSING_QUOTE {pin=1}

private quotedStringBody ::= REGULAR_STRING_PART+

intValue ::= NUMBER {extends=value}

floatValue ::= NUMBER {extends=value}
 

// operations

operationDefinition ::= selectionSetOperationDefinition | typedOperationDefinition {extends=definition}

selectionSetOperationDefinition ::= selectionSet {extends=operationDefinition mixin="com.intellij.lang.jsgraphql.psi.impl.GraphQLSelectionSetOperationDefinitionPsiElement"}

typedOperationDefinition ::= operationType identifier? variableDefinitions? directives? selectionSet { pin=1 extends=operationDefinition methods=[directives="directive" nameIdentifier="identifier"] implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" mixin="com.intellij.lang.jsgraphql.psi.impl.GraphQLTypedOperationDefinitionPsiElement"}

variableDefinitions ::= '(' variableDefinition+ ')' {pin=1 methods=[variableDefinitions="variableDefinition"]}

variableDefinition ::= variable ':' type defaultValue? {pin=1 recoverWhile=variableDefinition_recover}

private variableDefinition_recover ::= !(')' | root_tokens | variableDefinition)


selectionSet ::=  '{' selection+ '}' {pin=1}

selection ::=
    field |
    fragmentSelection |
    templateSelection
    {
        pin=1 recoverWhile=selection_recover
    }

private selection_recover ::= !('}' | root_tokens | selection)

field ::= alias? identifier arguments? directives? selectionSet? {methods=[directives="directive" nameIdentifier="identifier"] implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" mixin="com.intellij.lang.jsgraphql.psi.impl.GraphQLFieldPsiElement"}

alias ::= identifier ':'

fragmentSelection ::= '...' (fragmentSpread | inlineFragment) {pin=1}

templateSelection ::= templatePlaceholder

fragmentSpread ::= fragmentName directives? {pin=1 implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[directives="directive" nameIdentifier="identifier"]}

inlineFragment ::= typeCondition? directives? selectionSet {pin=1 methods=[directives="directive"] implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" mixin="com.intellij.lang.jsgraphql.psi.impl.GraphQLInlineFragmentPsiElement"}

fragmentDefinition ::= 'fragment' fragmentName typeCondition directives? selectionSet {pin=1 extends=definition implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[directives="directive" nameIdentifier="identifier"] mixin="com.intellij.lang.jsgraphql.psi.impl.GraphQLFragmentDefinitionPsiElement"}

private fragmentName ::=  !'on' identifier

typeCondition ::= 'on' typeName {pin=1}

// SDL

typeSystemDefinition ::=
    schemaDefinition |
    typeDefinition |
    typeExtension |
    directiveDefinition
    {
        extends=definition
    }


schemaDefinition ::= 'schema' directives? operationTypeDefinitions {pin=1 extends=typeSystemDefinition implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[directives="directive"]}

operationTypeDefinitions ::= '{' operationTypeDefinition+ '}' {pin=1}

operationTypeDefinition ::= (operationType | NAME) ':' typeName {pin=1 recoverWhile=operationTypeDefinition_recover}

private operationTypeDefinition_recover ::= !('}' | root_tokens | operationTypeDefinition)

typeDefinition::=
    scalarTypeDefinition |
    objectTypeDefinition |
    interfaceTypeDefinition |
    unionTypeDefinition |
    enumTypeDefinition |
    inputObjectTypeDefinition
    {
        extends=typeSystemDefinition
    }


typeExtension ::=
    objectTypeExtensionDefinition |
    interfaceTypeExtensionDefinition |
    unionTypeExtensionDefinition |
    scalarTypeExtensionDefinition |
    enumTypeExtensionDefinition |
    inputObjectTypeExtensionDefinition
    {
        extends=typeSystemDefinition
    }



scalarTypeDefinition ::= description? 'scalar' typeNameDefinition directives? {pin=2 extends=typeDefinition implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[description="quotedString" directives="directive"]}

scalarTypeExtensionDefinition ::= 'extend' 'scalar' typeName directives? {pin=2 extends=typeExtension implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[directives="directive"]}

objectTypeDefinition ::= description? 'type' typeNameDefinition implementsInterfaces? directives? fieldsDefinition? {pin=2 extends=typeDefinition implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[description="quotedString" directives="directive"]}

objectTypeExtensionDefinition ::= 'extend' 'type' typeName implementsInterfaces? directives? fieldsDefinition? {pin=2 extends=typeExtension implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[directives="directive"]}

implementsInterfaces ::= 'implements' ampTypeName ampTypeName* {pin=1}

private ampTypeName ::= '&'? typeName

fieldsDefinition ::= '{' fieldDefinition* '}' {pin=1}

fieldDefinition ::= description? identifier argumentsDefinition? ':' type directives? {pin=2 implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[description="quotedString" directives="directive" nameIdentifier="identifier"] recoverWhile=fieldDefinition_recover}

private fieldDefinition_recover ::= !('}' | root_tokens | fieldDefinition)

argumentsDefinition ::= '(' inputValueDefinition+ ')' {pin=1}

inputValueDefinition ::= description? identifier ':' type defaultValue? directives? {pin=2 implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[description="quotedString" directives="directive" nameIdentifier="identifier"] recoverWhile=inputValueDefinition_recover mixin="com.intellij.lang.jsgraphql.psi.impl.GraphQLInputValueDefinitionPsiElement"}

private inputValueDefinition_recover ::= !(')' | '}' | inputValueDefinition)

interfaceTypeDefinition ::= description? 'interface' typeNameDefinition directives? fieldsDefinition? {pin=2 extends=typeDefinition implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[description="quotedString" directives="directive"]}

interfaceTypeExtensionDefinition ::= 'extend' 'interface' typeName directives? fieldsDefinition? {pin=2 extends=typeExtension implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[directives="directive"]}


unionTypeDefinition ::= description? 'union' typeNameDefinition directives? unionMembership? {pin=2 extends=typeDefinition implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[description="quotedString" directives="directive"]}

unionTypeExtensionDefinition ::= 'extend' 'union' typeName directives? unionMembership? {pin=2 extends=typeExtension implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[directives="directive"]}

unionMembership ::= '=' unionMembers {pin=1}

unionMembers::= '|'? typeName pipeUnionMember*

private pipeUnionMember ::= '|' typeName {pin=1}

enumTypeDefinition ::= description? 'enum' typeNameDefinition directives? enumValueDefinitions? {pin=2 extends=typeDefinition implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[description="quotedString" directives="directive"]}

enumTypeExtensionDefinition ::= 'extend' 'enum' typeName directives? enumValueDefinitions? {pin=2 extends=typeExtension implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[directives="directive"]}

enumValueDefinitions ::= '{' enumValueDefinition+ '}' {pin=1}

enumValueDefinition ::= description? enumValue directives? {pin=2 implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[description="quotedString" directives="directive"] recoverWhile=enumValueDefinition_recover}

private enumValueDefinition_recover ::= !('}' | enumValueDefinition | root_tokens)

inputObjectTypeDefinition ::= description? 'input' typeNameDefinition directives? inputObjectValueDefinitions? {pin=2 extends=typeDefinition implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[description="quotedString" directives="directive"]}

inputObjectTypeExtensionDefinition ::= 'extend' 'input' typeName directives? inputObjectValueDefinitions? {pin=2 extends=typeExtension implements="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectivesAware" methods=[directives="directive"]}

inputObjectValueDefinitions ::= '{' inputValueDefinition+ '}' {pin=1}


directiveDefinition ::= description? 'directive' '@' identifier argumentsDefinition? 'on' directiveLocations {pin=2 extends=typeSystemDefinition methods=[description="quotedString" nameIdentifier="identifier"]}

directiveLocation ::=  'QUERY' | 'MUTATION' | 'SUBSCRIPTION' | 'FIELD' | 'FRAGMENT_DEFINITION' | 'FRAGMENT_SPREAD' | 'INLINE_FRAGMENT' | 'SCHEMA' | 'SCALAR' | 'OBJECT' | 'FIELD_DEFINITION' | 'ARGUMENT_DEFINITION' | 'INTERFACE' | 'UNION' | 'ENUM' | 'ENUM_VALUE' | 'INPUT_OBJECT' | 'INPUT_FIELD_DEFINITION' | NAME {mixin="com.intellij.lang.jsgraphql.psi.impl.GraphQLDirectiveLocationPsiElement"}

directiveLocations ::= '|'? directiveLocation pipeDirectiveLocation*

private pipeDirectiveLocation ::= '|' directiveLocation

