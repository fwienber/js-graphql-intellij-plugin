<!--
/**
 *  Copyright (c) 2015-present, Jim Kynde Meyer
 *  All rights reserved.
 *
 *  This source code is licensed under the MIT license found in the
 *  LICENSE file in the root directory of this source tree.
 */
-->
<idea-plugin>
  <id>com.intellij.lang.jsgraphql</id>
  <name>JS GraphQL</name>
  <version>2.0.0-alpha-4</version>
  <vendor>Jim Kynde Meyer - jimkyndemeyer@gmail.com</vendor>

  <description><![CDATA[
      <p>GraphQL language support including Relay.QL tagged templates in JavaScript and TypeScript.</p>
      <p>Provides the following features:</p>
      <ul>
        <li>Schema-aware completion, error highlighting</li>
        <li>Syntax highlighting, code-formatting, folding, commenter, and brace-matching</li>
        <li>'Find Usages' and 'Go to Declaration' for schema types and fields</li>
        <li>'Go to Implementation' for schema interfaces</li>
        <li>Execute queries with variables against configurable endpoints</li>
      </ul>
    ]]></description>

  <change-notes><![CDATA[
    <ul>
      <li>2.0.0-alpha-3: graphql-config support</li>
      <li>2.0.0-alpha-2: Language support for GraphQL draft spec as of June 2018. Compatible with Android Studio 3.1 and IntelliJ IDEA Community Edition</li>
    </ul>
    ]]>
  </change-notes>

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/build_number_ranges.html for description -->
  <idea-version since-build="162"/>

  <!-- please see http://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
       on how to target different products -->

  <depends>com.intellij.modules.lang</depends>
  <depends optional="true" config-file="graphql-javascript.xml">JavaScript</depends>

  <depends>com.intellij.jsp</depends>
  <depends>com.intellij.spring</depends>

  <extensions defaultExtensionNs="com.intellij">

    <!-- Language registration -->
    <fileTypeFactory implementation="com.intellij.lang.jsgraphql.GraphQLFileTypeFactory"/>
    <lang.parserDefinition language="GraphQL" implementationClass="com.intellij.lang.jsgraphql.GraphQLParserDefinition"/>

    <!-- Icons -->
    <iconProvider implementation="com.intellij.lang.jsgraphql.GraphQLIconProvider" />

    <!-- Project services -->
    <projectService serviceInterface="com.intellij.lang.jsgraphql.schema.GraphQLTypeDefinitionRegistryServiceImpl" serviceImplementation="com.intellij.lang.jsgraphql.schema.GraphQLTypeDefinitionRegistryServiceImpl" />
    <projectService serviceInterface="com.intellij.lang.jsgraphql.schema.SchemaIDLTypeDefinitionRegistry" serviceImplementation="com.intellij.lang.jsgraphql.schema.SchemaIDLTypeDefinitionRegistry" />
    <projectService serviceInterface="com.intellij.lang.jsgraphql.ide.project.GraphQLPsiSearchHelper" serviceImplementation="com.intellij.lang.jsgraphql.ide.project.GraphQLPsiSearchHelper" />
    <projectService serviceInterface="com.intellij.lang.jsgraphql.ide.references.GraphQLReferenceService" serviceImplementation="com.intellij.lang.jsgraphql.ide.references.GraphQLReferenceService" />
    <projectService serviceInterface="com.intellij.lang.jsgraphql.v1.ide.project.JSGraphQLLanguageUIProjectService" serviceImplementation="com.intellij.lang.jsgraphql.v1.ide.project.JSGraphQLLanguageUIProjectService" />
    <projectService serviceInterface="com.intellij.lang.jsgraphql.GraphQLSettings" serviceImplementation="com.intellij.lang.jsgraphql.GraphQLSettings" />
    <projectService serviceInterface="com.intellij.lang.jsgraphql.ide.project.graphqlconfig.GraphQLConfigManager" serviceImplementation="com.intellij.lang.jsgraphql.ide.project.graphqlconfig.GraphQLConfigManager" />
    <projectService serviceInterface="com.intellij.lang.jsgraphql.ide.project.graphqlconfig.GraphQLConfigGlobMatcher" serviceImplementation="com.intellij.lang.jsgraphql.ide.project.graphqlconfig.GraphQLConfigGlobMatcherImpl" />
    <projectService serviceInterface="com.intellij.lang.jsgraphql.ide.project.scopes.GraphQLProjectScopesManager" serviceImplementation="com.intellij.lang.jsgraphql.ide.project.scopes.GraphQLProjectScopesManager" />
    <projectService serviceInterface="com.intellij.lang.jsgraphql.ide.GraphQLRelayModernAnnotationFilter" serviceImplementation="com.intellij.lang.jsgraphql.ide.GraphQLRelayModernAnnotationFilter" />

    <!-- Startup -->
    <postStartupActivity implementation="com.intellij.lang.jsgraphql.endpoint.ide.startup.GraphQLStartupActivity" />
    <postStartupActivity implementation="com.intellij.lang.jsgraphql.ide.project.graphqlconfig.GraphQLConfigProjectStartupActivity" />
    <postStartupActivity implementation="com.intellij.lang.jsgraphql.ide.project.relay.GraphQLRelayModernEnableStartupActivity" />

    <!-- Syntax and error highlighting -->
    <lang.syntaxHighlighterFactory language="GraphQL" implementationClass="com.intellij.lang.jsgraphql.ide.GraphQLSyntaxHighlighterFactory"/>
    <annotator language="GraphQL" implementationClass="com.intellij.lang.jsgraphql.ide.GraphQLSyntaxAnnotator" />
    <annotator language="GraphQL" implementationClass="com.intellij.lang.jsgraphql.ide.GraphQLValidationAnnotator" />
    <colorSettingsPage implementation="com.intellij.lang.jsgraphql.ide.GraphQLColorSettingsPage"/>

    <!-- Formatting and folding -->
    <lang.formatter language="GraphQL" implementationClass="com.intellij.lang.jsgraphql.ide.formatter.GraphQLFormattingModelBuilder"/>
    <lang.foldingBuilder language="GraphQL" implementationClass="com.intellij.lang.jsgraphql.ide.editor.GraphQLFoldingBuilder"/>

    <!-- Editing -->
    <lang.braceMatcher language="GraphQL" implementationClass="com.intellij.lang.jsgraphql.ide.GraphQLBraceMatcher" />
    <lang.quoteHandler language="GraphQL" implementationClass="com.intellij.lang.jsgraphql.ide.editor.GraphQLQuoteHandler" />
    <lang.commenter language="GraphQL" implementationClass="com.intellij.lang.jsgraphql.ide.editor.GraphQLCommenter"/>
    <enterHandlerDelegate implementation="com.intellij.lang.jsgraphql.ide.formatter.GraphQLEnterInEmptyListHandler"/>

    <!-- Completion -->
    <completion.contributor language="GraphQL" implementationClass="com.intellij.lang.jsgraphql.ide.completion.GraphQLCompletionContributor"/>

    <!-- Find usages and renaming refactors -->
    <lang.findUsagesProvider language="GraphQL" implementationClass="com.intellij.lang.jsgraphql.ide.references.GraphQLFindUsagesProvider" />
    <usageTypeProvider implementation="com.intellij.lang.jsgraphql.ide.references.GraphQLUsageTypeProvider" />
    <lang.elementManipulator forClass="com.intellij.lang.jsgraphql.psi.impl.GraphQLIdentifierImpl" implementationClass="com.intellij.lang.jsgraphql.ide.references.GraphQLIdentifierManipulator" />

    <!-- Search (find implementations etc.) -->
    <definitionsSearch implementation="com.intellij.lang.jsgraphql.ide.search.GraphQLDefinitionsSearchExecutor"/>

    <!-- Renaming -->
    <vetoRenameCondition implementation="com.intellij.lang.jsgraphql.ide.rename.GraphQLRenameVetoCondition" />

    <!-- Settings -->
    <projectConfigurable groupId="language" instance="com.intellij.lang.jsgraphql.ui.GraphQLProjectConfigurable" />

    <!-- .graphqlconfig JSON -->
    <fileTypeFactory implementation="com.intellij.lang.jsgraphql.ide.project.graphqlconfig.GraphQLConfigFileTypeFactory" />

    <!-- recognize .graphqls as GraphQL for legacy reasons -->
    <fileTypeFactory implementation="com.intellij.lang.jsgraphql.ide.project.GraphQLSLegacyFileTypeFactory" />

    <!-- Editor notifications -->
    <editorNotificationProvider implementation="com.intellij.lang.jsgraphql.ide.notifications.GraphQLScopeEditorNotificationProvider"/>

      <!-- Introspection -->
      <codeInsight.lineMarkerProvider implementationClass="com.intellij.lang.jsgraphql.ide.editor.GraphQLIntrospectionJsonToSDLLineMarkerProvider" language="JSON" />
      <codeInsight.lineMarkerProvider implementationClass="com.intellij.lang.jsgraphql.ide.editor.GraphQLIntrospectEndpointUrlLineMarkerProvider" language="JSON" />
      <projectViewNestingRulesProvider implementation="com.intellij.lang.jsgraphql.ide.project.GraphQLIntrospectionProjectViewNestingRulesProvider" />


    <!-- v2 above this point -->


    <!-- Project Language services -->
    <!--
    <projectService serviceInterface="JSGraphQLLanguageUIProjectService" serviceImplementation="JSGraphQLLanguageUIProjectService" />
    <projectService serviceInterface="JSGraphQLSchemaLanguageProjectService" serviceImplementation="JSGraphQLSchemaLanguageProjectService" />
    -->
    <projectService serviceInterface="com.intellij.lang.jsgraphql.v1.ide.configuration.JSGraphQLConfigurationProvider" serviceImplementation="com.intellij.lang.jsgraphql.v1.ide.configuration.JSGraphQLConfigurationProvider" />
    <projectService serviceInterface="com.intellij.lang.jsgraphql.endpoint.ide.project.JSGraphQLEndpointNamedTypeRegistry" serviceImplementation="com.intellij.lang.jsgraphql.endpoint.ide.project.JSGraphQLEndpointNamedTypeRegistry" />
    <!--
    <projectService serviceInterface="JSGraphQLPsiSearchHelper" serviceImplementation="JSGraphQLPsiSearchHelper" />
    -->


    <!-- Spellchecking and to-do view-->
    <spellchecker.support language="GraphQL Endpoint" implementationClass="com.intellij.lang.jsgraphql.endpoint.JSGraphQLEndpointSpellcheckingStrategy" />
    <todoIndexer filetype="GraphQL Endpoint" implementationClass="com.intellij.lang.jsgraphql.endpoint.JSGraphQLEndpointTodoIndexer"/>


    <!-- Project tree -->
    <!--
    <treeStructureProvider implementation="JSGraphQLSchemaTreeStructureProvider" />
    -->


    <!-- File types -->
    <fileTypeFactory implementation="com.intellij.lang.jsgraphql.endpoint.JSGraphQLEndpointFileTypeFactory"/>
    <fileTypeFactory implementation="com.intellij.lang.jsgraphql.endpoint.doc.JSGraphQLEndpointDocFileTypeFactory"/>
    <internalFileTemplate name="GraphQL File"/>


    <!-- Language -->

    <lang.parserDefinition language="GraphQL Endpoint" implementationClass="com.intellij.lang.jsgraphql.endpoint.JSGraphQLEndpointParserDefinition"/>
    <lang.parserDefinition language="GraphQL Endpoint Doc" implementationClass="com.intellij.lang.jsgraphql.endpoint.doc.JSGraphQLEndpointDocParserDefinition"/>
    <!--
    <lang.syntaxHighlighterFactory language="GraphQL" implementationClass="JSGraphQLSyntaxHighlighterFactory"/>
    <lang.syntaxHighlighterFactory language="GraphQL Schema" implementationClass="JSGraphQLSyntaxHighlighterFactory"/>
    -->
    <lang.syntaxHighlighterFactory language="GraphQL Endpoint" implementationClass="com.intellij.lang.jsgraphql.endpoint.ide.highlighting.JSGraphQLEndpointSyntaxHighlighterFactory"/>
    <lang.syntaxHighlighterFactory language="GraphQL Endpoint Doc" implementationClass="com.intellij.lang.jsgraphql.endpoint.doc.ide.highlighting.JSGraphQLEndpointDocSyntaxHighlighterFactory"/>
    <!--
    <lang.commenter language="GraphQL" implementationClass="JSGraphQLCommenter"/>
    <lang.commenter language="GraphQL Schema" implementationClass="JSGraphQLCommenter"/>
    -->
    <lang.commenter language="GraphQL Endpoint" implementationClass="com.intellij.lang.jsgraphql.v1.ide.editor.JSGraphQLCommenter"/>
    <!--
    <lang.braceMatcher language="GraphQL" implementationClass="JSGraphQLBraceMatcher"  />
    <lang.braceMatcher language="GraphQL Schema" implementationClass="JSGraphQLBraceMatcher"  />
    -->
    <lang.braceMatcher language="GraphQL Endpoint" implementationClass="com.intellij.lang.jsgraphql.endpoint.ide.editor.JSGraphQLEndpointBraceMatcher"  />
    <lang.psiStructureViewFactory language="GraphQL" implementationClass="com.intellij.lang.jsgraphql.ide.structureView.GraphQLPsiStructureViewFactory"/>
    <!--
    <lang.fileViewProviderFactory language="GraphQL Schema" implementationClass="JSGraphQLSchemaFileViewProviderFactory" />
    <lang.psiStructureViewFactory language="GraphQL Schema" implementationClass="JSGraphQLPsiStructureViewFactory"/>
    -->
    <lang.psiStructureViewFactory language="GraphQL Endpoint" implementationClass="com.intellij.lang.jsgraphql.endpoint.ide.structureView.JSGraphQLEndpointPsiStructureViewFactory"/>
    <iconProvider implementation="com.intellij.lang.jsgraphql.endpoint.psi.JSGraphQLEndpointIconProvider" />
    <enterHandlerDelegate implementation="com.intellij.lang.jsgraphql.endpoint.ide.editor.JSGraphQLEndpointEnterHandlerDelegate" />

    <!-- Completion -->
    <!--
    <completion.contributor language="GraphQL" implementationClass="JSGraphQLCompletionContributor"/>
    -->
    <completion.contributor language="GraphQL Endpoint" implementationClass="com.intellij.lang.jsgraphql.endpoint.ide.completion.JSGraphQLEndpointCompletionContributor"/>
    <completion.contributor language="GraphQL Endpoint Doc" implementationClass="com.intellij.lang.jsgraphql.endpoint.doc.ide.completion.JSGraphQLEndpointDocCompletionContributor"/>


    <!-- Error highlighting and annotations -->
    <!--
    <externalAnnotator language="GraphQL" implementationClass="JSGraphQLAnnotator" />
    <externalAnnotator language="GraphQL Schema" implementationClass="JSGraphQLAnnotator" />
    <externalAnnotator language="JavaScript" implementationClass="JSGraphQLAnnotator" />
    <externalAnnotator language="TypeScript" implementationClass="JSGraphQLAnnotator" /><!## Own reg required ##>
    <annotator language="JavaScript" implementationClass="JSGraphQLRelayTemplateAnnotator" /><!## Using the JSX dialect overwrites the default annotator ##>
    <annotator language="TypeScript" implementationClass="JSGraphQLRelayTemplateAnnotator" /><!## Using the JSX dialect overwrites the default annotator ##>
    -->
    <annotator language="GraphQL Endpoint" implementationClass="com.intellij.lang.jsgraphql.endpoint.ide.annotator.JSGraphQLEndpointHighlightAnnotator" />
    <annotator language="GraphQL Endpoint" implementationClass="com.intellij.lang.jsgraphql.endpoint.ide.annotator.JSGraphQLEndpointErrorAnnotator" />
    <annotator language="GraphQL Endpoint Doc" implementationClass="com.intellij.lang.jsgraphql.endpoint.doc.ide.annotator.JSGraphQLEndpointDocHighlightAnnotator" />


    <!-- Query context highlighter -->
    <!-- Fixme: Breaks internal annotators used in v2: <highlightVisitor implementation="com.intellij.lang.jsgraphql.v1.ide.editor.JSGraphQLQueryContextHighlightVisitor" />-->


    <!-- Formatting -->
    <!--
    <lang.formatter language="GraphQL" implementationClass="JSGraphQLFormattingModelBuilder"/>
    <lang.formatter language="GraphQL Schema" implementationClass="JSGraphQLFormattingModelBuilder"/>
    -->
    <lang.formatter language="GraphQL Endpoint" implementationClass="com.intellij.lang.jsgraphql.endpoint.ide.formatter.JSGraphQLEndpointFormattingModelBuilder"/>
    <!--
    <lang.foldingBuilder language="GraphQL" implementationClass="JSGraphQLFoldingBuilder"/>
    <lang.foldingBuilder language="GraphQL Schema" implementationClass="JSGraphQLFoldingBuilder"/>
    -->
    <lang.foldingBuilder language="GraphQL Endpoint" implementationClass="com.intellij.lang.jsgraphql.endpoint.ide.editor.JSGraphQLEndpointFoldingBuilder"/>
    <!--
    <lang.quoteHandler language="GraphQL" implementationClass="JSGraphQLQuoteHandler" />
    <lang.quoteHandler language="GraphQL Schema" implementationClass="JSGraphQLQuoteHandler" />
    -->
    <lang.quoteHandler language="GraphQL Endpoint" implementationClass="com.intellij.lang.jsgraphql.endpoint.ide.editor.JSGraphQLEndpointQuoteHandler" />
    <!--
    <enterHandlerDelegate implementation="JSGraphQLEnterHandlerDelegate" />
    <enterHandlerDelegate implementation="JSGraphQLEnterInEmptyListHandler"/>
    -->
    <!--
    <langCodeStyleSettingsProvider implementation="JSGraphQLLanguageCodeStyleSettingsProvider"/>
    <codeStyleSettingsProvider implementation="JSGraphQLCodeStyleSettingsProvider" />
    -->


    <!-- Find usages -->
    <!--
    <lang.findUsagesProvider language="GraphQL" implementationClass="JSGraphQLFindUsagesProvider" />
    -->
    <lang.findUsagesProvider language="GraphQL Endpoint" implementationClass="com.intellij.lang.jsgraphql.endpoint.ide.findUsages.JSGraphQLEndpointFindUsagesProvider" />
    <usageTypeProvider implementation="com.intellij.lang.jsgraphql.v1.ide.findUsages.JSGraphQLUsageTypeProvider" />
    <!--
    <findUsagesHandlerFactory id="GraphQL" implementation="JSGraphQLFindUsagesHandlerFactory"/>
    -->
    <findUsagesHandlerFactory id="GraphQL Endpoint" implementation="com.intellij.lang.jsgraphql.endpoint.ide.findUsages.JSGraphQLEndpointFindUsagesHandlerFactory"/>


    <!-- Renaming -->
    <!--
    <vetoRenameCondition implementation="JSGraphQLRenameVetoCondition" />
    -->

    
    <!-- Schema documentation -->
    <!--
    <lang.documentationProvider language="GraphQL" implementationClass="JSGraphQLDocumentationProvider" />
    <lang.documentationProvider language="GraphQL Schema" implementationClass="JSGraphQLDocumentationProvider" />
    -->
    <!-- Note: JSX/TSX documentation providers are registered in their base language (JS), so we do the same to not take over the entire doc impl -->
    <!--
    <lang.documentationProvider language="JavaScript" implementationClass="JSGraphQLDocumentationProvider" />
    -->


    <!-- Editor notification bars and markers -->
    <!--<editorNotificationProvider implementation="com.intellij.lang.jsgraphql.v1.ide.notifications.JSGraphQLConfigEditorNotificationProvider"/>-->
    <!--
    <editorNotificationProvider implementation="JSGraphQLApolloLokkaEditorNotificationProvider"/>
    -->
    <!--
    <codeInsight.lineMarkerProvider language="JavaScript" implementationClass="JSGraphQLLineMarkerProvider" />
    -->

    <!--
    <editorTabColorProvider implementation="JSGraphQLSchemaEditorTabColorProvider" />
    -->

    <!-- Language injection -->
    <!--
    <multiHostInjector implementation="JSGraphQLTemplateFragmentLanguageInjector" order="first" />
    -->
    <languageInjector implementation="com.intellij.lang.jsgraphql.endpoint.doc.ide.injection.JSGraphQLEndpointDocInjector" />
    <languageInjector implementation="com.intellij.lang.jsgraphql.springel.GraphQLSchemaSpringELInjector" />


    <!-- Settings -->
    <!--
    <colorSettingsPage implementation="JSGraphQLColorSettingsPage" />
    -->

    <!-- Query execution (see com.intellij.openapi.actionSystem.IdeActions.ACTION_EDITOR_SPLIT which is ctrl+enter by default) -->
    <editorActionHandler action="EditorSplitLine" implementationClass="com.intellij.lang.jsgraphql.v1.ide.actions.JSGraphQLExecuteEditorActionHandler" order="first" />
    <highlightErrorFilter implementation="com.intellij.lang.jsgraphql.v1.ide.editor.JSGraphQLVariablesHighlightErrorFilter" />


    <!-- Search (find implementations etc.) -->
    <!--
    <definitionsSearch implementation="JSGraphQLDefinitionsSearchExecutor"/>
    -->
    <definitionsSearch implementation="com.intellij.lang.jsgraphql.endpoint.ide.search.JSGraphQLEndpointDefinitionsSearchExecutor"/>


    <!-- Create type definition intentions -->
    <intentionAction>
      <className>com.intellij.lang.jsgraphql.endpoint.ide.intentions.JSGraphQLEndpointCreateObjectTypeIntention</className>
      <category>GraphQL</category>
    </intentionAction>
    <intentionAction>
      <className>com.intellij.lang.jsgraphql.endpoint.ide.intentions.JSGraphQLEndpointCreateInterfaceTypeIntention</className>
      <category>GraphQL</category>
    </intentionAction>
    <intentionAction>
      <className>com.intellij.lang.jsgraphql.endpoint.ide.intentions.JSGraphQLEndpointCreateEnumTypeIntention</className>
      <category>GraphQL</category>
    </intentionAction>
    <intentionAction>
      <className>com.intellij.lang.jsgraphql.endpoint.ide.intentions.JSGraphQLEndpointCreateInputTypeIntention</className>
      <category>GraphQL</category>
    </intentionAction>
    <intentionAction>
      <className>com.intellij.lang.jsgraphql.endpoint.ide.intentions.JSGraphQLEndpointCreateScalarTypeIntention</className>
      <category>GraphQL</category>
    </intentionAction>
    <intentionAction>
      <className>com.intellij.lang.jsgraphql.endpoint.ide.intentions.JSGraphQLEndpointCreateUnionTypeIntention</className>
      <category>GraphQL</category>
    </intentionAction>


  </extensions>

  <actions>

    <action id="com.intellij.lang.jsgraphql.v1.ide.actions.JSGraphQLNewFileAction" class="com.intellij.lang.jsgraphql.v1.ide.actions.JSGraphQLNewFileAction">
      <add-to-group group-id="NewGroup"/>
    </action>

    <action class="com.intellij.lang.jsgraphql.ide.actions.GraphQLCreateConfigFileAction" id="com.intellij.lang.jsgraphql.ide.actions.GraphQLCreateConfigFileAction">
      <add-to-group group-id="NewGroup" />
    </action>

    <!-- TODO JKM: Needs integration with references service
    <action id="com.intellij.lang.jsgraphql.endpoint.ide.actions.JSGraphQLEndpointNewFileAction" class="com.intellij.lang.jsgraphql.endpoint.ide.actions.JSGraphQLEndpointNewFileAction">
      <add-to-group group-id="NewGroup"/>
    </action>
    -->

    <action class="com.intellij.lang.jsgraphql.v1.ide.actions.JSGraphQLExecuteEditorAction" id="com.intellij.lang.jsgraphql.v1.ide.actions.JSGraphQLExecuteEditorAction">
      <keyboard-shortcut first-keystroke="control ENTER" keymap="$default"/>
      <keyboard-shortcut first-keystroke="meta ENTER" keymap="Mac OS X"/>
      <keyboard-shortcut first-keystroke="meta ENTER" keymap="Mac OS X 10.5+"/>
    </action>

  </actions>

</idea-plugin>